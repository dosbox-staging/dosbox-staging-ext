name: Build vcpkg dependencies

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-macos:
    name: Build macOS vcpkg deps (${{ matrix.runner.arch }})
    runs-on: ${{ matrix.runner.host }}
    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.runner.minimum_deployment }}

    strategy:
      matrix:
        runner:
          - host: macos-15
            arch: arm64
            triplet: arm64-osx-dynamic
            minimum_deployment: '11.0'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Clone vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git $VCPKG_ROOT

      - name: Bootstrap vcpkg
        run: |
          cd $VCPKG_ROOT
          ./bootstrap-vcpkg.sh


      - name: Install packages (arm64)
        run: |
          ${{ env.VCPKG_ROOT }}/vcpkg install --overlay-ports=fluidsynth --triplet arm64-osx-dynamic

      - name: Prepare release deps (arm64)
        shell: bash
        run: |
          mkdir -p deps/arm64/release
          cd $GITHUB_WORKSPACE/vcpkg_installed/arm64-osx-dynamic/lib/
          cp $(<$GITHUB_WORKSPACE/deps-macos.txt) $GITHUB_WORKSPACE/deps/arm64/release

          echo "*** libfluidsynth transitive deps:"
          otool -L libfluidsynth.3.dylib

          echo "*** libslirp transitive deps:"
          otool -L libslirp.dylib

          cd $GITHUB_WORKSPACE
          mkdir -p deps/arm64/debug
          cd $GITHUB_WORKSPACE/vcpkg_installed/arm64-osx-dynamic/debug/lib/
          cp $(<$GITHUB_WORKSPACE/deps-macos.txt) $GITHUB_WORKSPACE/deps/arm64/debug


      - name: Install packages (x64)
        run: |
          ${{ env.VCPKG_ROOT }}/vcpkg install  --overlay-ports=fluidsynth --triplet x64-osx-dynamic

      - name: Prepare release deps (x64)
        shell: bash
        run: |
          mkdir -p deps/x64/release
          cd $GITHUB_WORKSPACE/vcpkg_installed/x64-osx-dynamic/lib/
          cp $(<$GITHUB_WORKSPACE/deps-macos.txt) $GITHUB_WORKSPACE/deps/x64/release

          cd $GITHUB_WORKSPACE
          mkdir -p deps/x64/debug
          cd $GITHUB_WORKSPACE/vcpkg_installed/x64-osx-dynamic/debug/lib/
          cp $(<$GITHUB_WORKSPACE/deps-macos.txt) $GITHUB_WORKSPACE/deps/x64/debug


      - name: Prepare release deps (universal)
        shell: bash
        run: |
          ARM64=$GITHUB_WORKSPACE/deps/arm64
          X64=$GITHUB_WORKSPACE/deps/x64

          mkdir -p deps/release deps/debug

          for LIB in $(<deps-macos.txt); do
            lipo $ARM64/release/$LIB $X64/release/$LIB \
                  -create -output deps/release/$LIB

            lipo $ARM64/debug/$LIB $X64/debug/$LIB \
                  -create -output deps/debug/$LIB
          done

          rm -rf $ARM64 $X64


#      - name: Dump workspace contents
#        run: find $RUNNER_WORKSPACE
#        shell: bash

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: dosbox-vcpkg-deps-macos-universal
          path: deps/*


  build-linux:
    name: Build Linux vcpkg deps (x86_64)
    runs-on: ubuntu-22.04
    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Clone vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git $VCPKG_ROOT

      - name: Bootstrap vcpkg
        run: |
          cd $VCPKG_ROOT
          ./bootstrap-vcpkg.sh

      - name: Install packages
        run: |
          ${{ env.VCPKG_ROOT }}/vcpkg install --overlay-ports=fluidsynth --triplet x64-linux-dynamic

#      - name: Dump workspace contents
#        run: find $RUNNER_WORKSPACE
#        shell: bash
 
      - name: Prepare libs to upload
        run: |
          mkdir -p $GITHUB_WORKSPACE/deps/release
          cd $GITHUB_WORKSPACE/vcpkg_installed/x64-linux-dynamic/lib/
          cp $(<$GITHUB_WORKSPACE/deps-linux.txt) $GITHUB_WORKSPACE/deps/release

          echo "*** libfluidsynth transitive deps:"
          ldd libfluidsynth.so.3

          echo "*** libslirp transitive deps:"
          ldd libslirp.so

          cd $GITHUB_WORKSPACE
          mkdir -p $GITHUB_WORKSPACE/deps/debug
          cd $GITHUB_WORKSPACE/vcpkg_installed/x64-linux-dynamic/debug/lib/
          cp $(<$GITHUB_WORKSPACE/deps-linux.txt) $GITHUB_WORKSPACE/deps/debug


      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: dosbox-vcpkg-deps-linux-x86_64
          path: deps/*


  build_windows:
    name: Build Windows vcpkg deps (${{ matrix.conf.arch }})
    runs-on: windows-2022
    env:
      VCPKG_ROOT: C:\vcpkg
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    strategy:
      matrix:
        conf:
          - arch: x64
            triplet: x64-windows

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout vcpkg baseline
        shell: pwsh
        run: |
          $baseline = (Get-Content vcpkg.json | ConvertFrom-Json).'builtin-baseline'
          cd $env:VCPKG_INSTALLATION_ROOT
          git fetch
          rm vcpkg.exe
          git -c advice.detachedHead=false checkout $baseline
          bootstrap-vcpkg.bat -disableMetrics

      - name:  Install packages
        shell: pwsh
        run: |
          ${{ env.VCPKG_ROOT }}\vcpkg.exe install --overlay-ports=fluidsynth --triplet ${{ matrix.conf.triplet }}
          if (-not $?) { throw "vcpkg failed to install packages" }

      - name: Dump workspace contents
        run: find $RUNNER_WORKSPACE
        shell: bash
 
      - name: Prepare release libs to upload
        shell: bash
        run: |
          mkdir -p $GITHUB_WORKSPACE/deps/release
          cd $GITHUB_WORKSPACE/vcpkg_installed/${{ matrix.conf.triplet }}/bin/
          cp $(<$GITHUB_WORKSPACE/deps-windows-release.txt) $GITHUB_WORKSPACE/deps/release

          cd $GITHUB_WORKSPACE
          mkdir -p $GITHUB_WORKSPACE/deps/debug
          cd $GITHUB_WORKSPACE/vcpkg_installed/${{ matrix.conf.triplet }}/debug/bin/
          cp $(<$GITHUB_WORKSPACE/deps-windows-debug.txt) $GITHUB_WORKSPACE/deps/debug


      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: dosbox-vcpkg-deps-windows-${{ matrix.conf.arch }}
          path: deps/*

